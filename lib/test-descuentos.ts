// lib/test-descuentos.ts
// Script de prueba para validar el sistema de descuentos
import { 
  createDescuento, 
  getDescuentosByEmpresa, 
  getEstadisticasDescuentos,
  deleteDescuento,
  getFichaEmpleado
} from './descuentos-manager';

// Funci√≥n para probar el sistema de descuentos
export async function testDescuentosSystem(): Promise<{
  success: boolean;
  results: string[];
  errors: string[];
}> {
  const results: string[] = [];
  const errors: string[] = [];

  try {
    results.push('üß™ Iniciando pruebas del sistema de descuentos...');

    // Test 1: Crear un descuento de prueba
    results.push('üìù Test 1: Crear descuento de prueba...');
    const descuentoPrueba = await createDescuento({
      legajo: 'TEST001',
      nombre: 'EMPLEADO PRUEBA',
      empresa: 'LIMPAR',
      fechaInicio: Date.now(),
      monto: 50000,
      cantidadCuotas: 12,
      cuotaActual: 0,
      descripcion: 'Pr√©stamo de prueba para testing',
      tipoDescuento: 'PRESTAMO',
      estado: 'ACTIVO',
      tags: ['test', 'prueba'],
      motivo: 'Testing del sistema',
      autorizadoPor: 'Sistema de Pruebas',
      fechaAutorizacion: Date.now(),
      creadoPor: 'test_user'
    });
    
    results.push(`‚úÖ Descuento creado con ID: ${descuentoPrueba.id}`);

    // Test 2: Buscar descuentos por empresa
    results.push('üîç Test 2: Buscar descuentos por empresa...');
    const descuentosEmpresa = await getDescuentosByEmpresa('LIMPAR');
    results.push(`‚úÖ Encontrados ${descuentosEmpresa.length} descuentos para LIMPAR`);

    // Test 3: Obtener estad√≠sticas
    results.push('üìä Test 3: Obtener estad√≠sticas...');
    const estadisticas = await getEstadisticasDescuentos('LIMPAR');
    results.push(`‚úÖ Estad√≠sticas obtenidas: ${estadisticas.total} total, ${estadisticas.activos} activos`);

    // Test 4: Obtener ficha de empleado
    results.push('üë§ Test 4: Obtener ficha de empleado...');
    const ficha = await getFichaEmpleado('TEST001', 'LIMPAR');
    results.push(`‚úÖ Ficha obtenida: ${ficha.nombre}, ${ficha.descuentosActivos.length} descuentos activos`);

    // Test 5: Limpiar datos de prueba
    results.push('üßπ Test 5: Limpiar datos de prueba...');
    await deleteDescuento(descuentoPrueba.id, 'test_user');
    results.push('‚úÖ Descuento de prueba eliminado');

    results.push('üéâ Todas las pruebas completadas exitosamente!');

    return {
      success: true,
      results,
      errors
    };

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
    errors.push(`‚ùå Error en las pruebas: ${errorMessage}`);
    
    return {
      success: false,
      results,
      errors
    };
  }
}

// Funci√≥n para probar la validaci√≥n de PDFs
export async function testPdfValidation(): Promise<{
  success: boolean;
  results: string[];
  errors: string[];
}> {
  const results: string[] = [];
  const errors: string[] = [];

  try {
    results.push('üß™ Iniciando pruebas del sistema de validaci√≥n de PDFs...');

    // Test 1: Datos v√°lidos
    results.push('‚úÖ Test 1: Validaci√≥n de datos v√°lidos...');
    const { validateReceiptData } = await import('./pdf-validation');
    
    const datosValidos = {
      LEGAJO: '12345',
      PERIODO: '01/2025',
      NOMBRE: 'JUAN PEREZ',
      CUIL: '20123456789',
      EMPRESA: 'LIMPAR',
      GUARDAR: 'true',
      ARCHIVO: 'test.pdf'
    };

    const validacionValida = validateReceiptData({
      data: datosValidos,
      debugLines: []
    });

    if (validacionValida.isValid) {
      results.push('‚úÖ Datos v√°lidos pasaron la validaci√≥n');
    } else {
      errors.push(`‚ùå Datos v√°lidos fallaron: ${validacionValida.errors.join(', ')}`);
    }

    // Test 2: Datos inv√°lidos
    results.push('‚ùå Test 2: Validaci√≥n de datos inv√°lidos...');
    const datosInvalidos = {
      LEGAJO: 'abc', // Inv√°lido
      PERIODO: '13/2025', // Mes inv√°lido
      NOMBRE: '', // Vac√≠o
      EMPRESA: 'EMPRESA_DESCONOCIDA', // No reconocida
      GUARDAR: 'true',
      ARCHIVO: 'test.pdf'
    };

    const validacionInvalida = validateReceiptData({
      data: datosInvalidos,
      debugLines: []
    });

    if (!validacionInvalida.isValid) {
      results.push(`‚úÖ Datos inv√°lidos correctamente rechazados: ${validacionInvalida.errors.length} errores`);
    } else {
      errors.push('‚ùå Datos inv√°lidos pasaron la validaci√≥n incorrectamente');
    }

    results.push('üéâ Pruebas de validaci√≥n completadas!');

    return {
      success: true,
      results,
      errors
    };

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
    errors.push(`‚ùå Error en las pruebas de validaci√≥n: ${errorMessage}`);
    
    return {
      success: false,
      results,
      errors
    };
  }
}

// Funci√≥n principal para ejecutar todas las pruebas
export async function runAllTests(): Promise<void> {
  console.log('üöÄ Ejecutando todas las pruebas del sistema...');
  
  const [descuentosTest, pdfTest] = await Promise.all([
    testDescuentosSystem(),
    testPdfValidation()
  ]);

  console.log('\nüìã Resultados de las pruebas:');
  
  if (descuentosTest.success) {
    console.log('‚úÖ Sistema de descuentos: PAS√ì');
    descuentosTest.results.forEach(result => console.log(`  ${result}`));
  } else {
    console.log('‚ùå Sistema de descuentos: FALL√ì');
    descuentosTest.errors.forEach(error => console.log(`  ${error}`));
  }

  if (pdfTest.success) {
    console.log('‚úÖ Sistema de validaci√≥n PDF: PAS√ì');
    pdfTest.results.forEach(result => console.log(`  ${result}`));
  } else {
    console.log('‚ùå Sistema de validaci√≥n PDF: FALL√ì');
    pdfTest.errors.forEach(error => console.log(`  ${error}`));
  }

  const allPassed = descuentosTest.success && pdfTest.success;
  console.log(`\nüéØ Resultado final: ${allPassed ? 'TODAS LAS PRUEBAS PASARON' : 'ALGUNAS PRUEBAS FALLARON'}`);
}
